# -*- coding: utf-8 -*-
"""training

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D7cua3hDNuSTKTrnstAJODy2ivGfTHIi
"""

num=int(input("enter number"))
sum=0
rem=0
temp=num
while(temp>0):
  rem=temp%10
  sum=sum+rem
  temp=temp//10
print(sum)
if(num%sum==0):
  print("nivens number")
else:
  print("not nivens number")

num=123
n_string=str(num)
r_num=" ".join(reversed(n_string))
print(r_num)

def reverse(n):
  if len(n)==0:
    return n
  return reverse(n[1:])+n[0]
num=1234
n_string=str(num)
r_num=reverse(n_string)
print("reversed num:"+r_num)

num=int(input("enter the number"))
while num!=0:
  temp=num%10
  print(temp,end=" ")
  num=num//10

n=int(input("enter number"))
avg=0.0
s=0
for i in range(1,n+1):
  s=s+i
avg=s/i
print("sum",s)
print("avgerage",avg)

n=int(input("enter number:"))
for i in range(1,11):
  print(i,"*",n,i*n)

for i in range(1900,2101):
  if(i%4==0):
    print(i,end=" ")

n=int(input("enter number:"))
m=1/n

n=int(input("enter number"))
s=0.0
for i in range(1,n+1):
  s=s+1/i
print("sum",s)

n=int(input("enter number"))
s=0.0
for i in range(1,n+1):
  s=s+1/(i**i)
print("sum",s)

str="hi"
print(str.capitalize())

str="hi"
print(str.center(10,'$'))

str="hello"
print(str.center(11,'$'))

str="he"
substr="hehellhehell"
print(substr.count(str,0,len(substr)))

str="ll"
substr="hehellhehell"
print(substr.count(str,0,len(substr)))

str="he is a tall person"
print(str.find("tall",0,len(str)))

#left justification
str="hi"
print(str.ljust(20,'^'))

#right justification
str="hi"
print(str.rjust(20,'^'))

#syntax for zfill(width)
str="6"
print(str.zfill(4))

print(ord("A"))
print(ord("n"))

str="Zebra"
print(max(str))
print(min(str))

str="hi how are you"
print(str.title())

str="Hi How Are You"
print(str.swapcase())

str="Hi How Are You"
print(list(enumerate(str)))

str="INDIA HAS WON"
for i in str:
  print(i,end=' ')

#caeser cipher
str="india"
index=0
while index <len(str):
  letter=str[index]
  print(chr(ord(letter)+ 2),end=' ')
  index +=1

str="ate"
i=0
list=['a','b','c','d','e']
while i <len(list):
  s=list[i]+str
  print(s)
  i=i+1

val=int(input("enter the posistion"))
a=b=0
for i in range(1,val+1):
  if(i%2==0):
    a=a+7
  else:
    b=b+6
if val%2!=0:
  print('{} at accordance {}'.format(val,a-7))
else:
  print('{} at accordance {}'.format(val,b-6))

n=int(input())
a=b=0
list=[]
for i in range(n+1):
  if(i%2==0):
    a=a+7
    list.append(a)
  else:
    b=b+6
    list.append(b)
print(list)
m=int(input("enter position:"))
for i in range(0,n+1):
  if(i==m):
    print(list[i])

val=int(input("enter the posistion"))
a=b=1
for i in range(1,val+1):
  if(i%2==0):
    a=a*2
  else:
    b=b*3
if val%2!=0:
  print('{} at accordance {}'.format(val,a//2))
else:
  print('{} at accordance {}'.format(val,b//3))

n=int(input())
a=b=1
list=[]
for i in range(n+1):
  if(i%2==0):
    a=2**i
    list.append(a)
  else:
    b=3**i
    list.append(b)
print(list)
m=int(input("enter position:"))
for i in range(1,n+1):
  if(i==m):
    print(list[i])

for i in range(5):
  for m in range(i+1):
    print("*",end=" ")
  print("\n")

rows=int(input("enter number of rows"))
for i in range(rows,0,-1):
  for j in range(0,i):
    print(j+1,end=" ")
  print("\n")

rows=int(input("enter number of rows"))
for i in range(1,rows+1):
  for j in range(1,rows+1):
    if(j<i):
      print(' ',end=' ')
    else:
      print("@",end=' ')
  print("\n")

rows=int(input("enter number of rows"))
i=1
while(i<=rows):
  j=1
  while(j<=rows):
    if j<i:
      print(' ',end=' ')
    else:
      print('@',end=' ')
    j=j+1
  i=i+1
  print()

rows=int(input("enter number of rows"))
for i in range(1,rows+1):
  for j in range(1,rows+1):
    if(j<i):
      print(' ',end=' ')
    else:
      print(" @ ",end=' ')
  print("\n")

rows=int(input("enter number of rows"))
i=1
while i<=rows:
  j=rows
  while j>i:
    print(' ',end=" ")
    j-=1
  print('*',end=" ")
  k=1
  while k<2 *(i-1):
    print(' ',end=" ")
    k+=1
  if i==1:
    print()
  else:
    print("*")
  i+=1
i=rows-1
while i>=1:
  j=rows
  while j>i:
    print(' ',end=" ")
    j-=1
  print('*',end=" ")
  k=1
  while k<2*(i-1):
    print(' ',end=" ")
    k+=1
  if i==1:
    print()
  else:
    print("*")
  i-=1

rows=5
k=2*rows-2
for i in range(0,rows):
  for j in range(0,k):
    print(end=" ")
  k=k-1
  for j in range(0,i+1):
    print("* ",end="")
  print("")
k=rows-2
for i in range(rows,  -1, -1):
  for j in range(k, 0, -1):
    print(end=" ")
  k=k+1
  for j in range(0,i+1):
    print("* ",end="")
  print("")

word="California"
x= ""
for i in word:
  x+=i
  print(x)

a=65
r=7
for i in range(0, r):
  for j in range(0, i+1):
      ch=chr(a)
      print(ch,end=' ')
      a+=1
  print(" ")

a=65
r=7
m=(2*a)-2
for i in range(0, r):
  for j in range(0,m):
    print(end=" ")
  m=m-1
  for j in range(0,i+1):
      ch=chr(a)
      print(ch,end=' ')
      a+=1
  print(" ")

rows=10
for i in range(1, rows+1):
  for j in range(1, i+1):
    print(i*j, end=" ")
  print()

def diff(a,b):
  return a-b
x=20
y=10
operation=diff
print(operation(x,y))

#program to display a string n number of times
def fun():  #calling a function
  for i in range(5):
    print("hi students")
fun()

def diff(a, b):
  result = a-b
  print("difference of a and b is:",result)
x=20
y=10
diff(x,y)

for i in range(1,10):
  count=0
  for j in range(2,(j//2+1)):
    if(j % i==0):
      count=count+1
      break
    
if(count==0 and j!=1):
  print(j,end='')

i=1
j=10
for num in range(i,j+1):
  if num>1:
    for i in range(2, num):
      if(num % i) == 0:
        break
    else:
      print(num,end=" ")

a=int(input())
b=int(input())
if(a<=0 or b<=0 or a>b):
  print("provide ")

n=int(input("enter the size:"))
val=n * 2 -1
for i in range(1, val+1):
  for j in range(1, val+1):
    if i==j or j==val-i +1:
      print('*',end='')
    else:
      print(' ',end=' ')
  print()

n=int(input("enter the size:"))
for i in range(1,2*size):
  for j in range(1,2*size):
    if i==size or j==size:
      print('*',end=' ')
    else:
      print(' ',end=' ')
  print()

n=int(input("enter the size:"))
val=0
st=int(n/2+1)
if n%2!=0:
  for i in range(1, int(n/2+2)):
    for j in range(1, val+1):
      print(' ',end='')
    for k in range(1, st+1):
      print('*',end=' ')
    print()
    val+=1
    st-=1
  val-=2
  st+=2
  for i in range(1, int(n/2+2)):
    for j in range(1, val+1):
      print(' ',end='')
    for k in range(1, st+1):
      print('*',end=' ')
    print()
    val-=1
    st+=1
else:
  print("provide accurate input")

#function - space is allocated in the memeory location
#function is into 2 parts
#1.function header
#2.function body

#Arguments passed with return values

def add(x,y):
  return x+y
a=10
b=20
operation=add
print(operation(a,b))

def fun():
  for i in range(10):
    print("abcde")

var1=" hi "
def abc():
  global var2
  var2=" goodmorning"
  print("in the function var1 is - ",var1)
abc()
print("outside function is var2 -",var2)

var1=" hi "
def abc():
  global var2
  var2=" goodmorning"
  print("in the function var1 is - ",var1)
abc()
print("outside function is var2 -",var1)
var1=" verygood"
print("outside function after modify",var1)

#program to demo access of var in inner and outer function

def outer_fun():
  outer_var=11
  def inner_fun():
    inner_var=22
    print("inner variable",inner_var)
  inner_fun()
  print("outer variable",outer_var)
outer_fun()

#writing a function and return its cubation format
def cube(x):
  return(x*x*x)

num=10
result=cube(num)
print("cube of", num, " = ",result)

#writing a function to understand a mismatch parameters
def abc(x):
  print(" hi students"+x)
abc(5)#strings doesnot support + operator

#writing a function to understand a mismatch parameters
def abc(x):
  print(" hi students"+"x",x)
abc(5)#strings doesnot support + operator

#writing a function to understand a mismatch parameters
def fun(i):
  print("orange",i)
j=10
fun(j)

#writing a function to understand a mismatch parameters
def fun(i):
  print("orange",i)
fun(5+2*4)

#program to demonstrate key arguments

def display(str,int_x,float_y):
  print("the string is ",str)
  print("the integer is ",int_x)
  print("the float is ",float_y)
display(float_y= 5678.9998, str=" hi",int_x=1234)

#program to demonstrate key arguments

def display(name,age,salary):
  print("name is ",name)
  print("age is ",age)
  print("salary is",salary)
a="Lucky"
b=19
c=67000
display(name=a,age=b,salary=c)

addition=lambda x,y,z:x+y+z
print("sum=",addition(10,20,30))

def small(a,b):
  if(a<b):
    return a
  else:
    return b
addition=lambda x,y:x+y
difference=lambda x,y:x-y
print("smaller of two number:",small(addition(-3,-2),difference(-1,2)))

def increment(y):
  return (lambda x:x+1)(y)

a=100
print("a=",a)
print("a after incrementing")
b=increment(a)
print(b)

#program to pass a lambda function as an function argument

def fun(f,n):
  print(f(n))
twice=lambda x:x*2
triple=lambda x:x*3
fun(twice,4)
fun(triple,3)

add=lambda x,y:x+y
m_and_add=lambda x,y,z : x*add(y,z)
print(m_and_add(3,4,5))

x=lambda : sum(range(1,11))
print(x())

#swapping of two numbers
def swap(a,b):
  temp=a
  a=b
  b=temp
  return(a,b)

a=10
b=20
print((a,b))
print(swap(a,b))

#swapping of two numbers
def swap(a,b,c):
  temp=b
  b=a
  a=c
  c=temp
  return(a,b,c)

a=10
b=20
c=30
print((a,b,c))
print(swap(a,b,c))

#swapping of two numbers
def swap(a,b,c):
  temp=b
  b=c
  c=a
  a=temp
  return(a,b,c)

a=10
b=20
c=30
print((a,b,c))
print(swap(a,b,c))

def swap(a,b):
  a,b=b,a
  return(a,b)

a=10
b=20
print((a,b))
print(swap(a,b))

def swapList(newList):
    size = len(newList)
    # Swapping 
    temp = newList[0]
    newList[0] = newList[size - 1]
    newList[size - 1] = temp
    return newList
# Driver code
newList = [12,35,9,56,24]
print(swapList(newList))

def name(fn,ln):
  s=' '
  n=fn+s+ln
  return n
print(name("Lucky","valupadasu"))

def n(x):
  if(x%2==0):
    return 1
  else:
    return -1

x=int(input("enter a number:"))
y=n(x)
if(y==0):
  print("entered number is even")
else:
  print("enter number is odd")

p=200
r=3
t=6
si=p*t*r/100
print(si)

def fact(n):
  if(n==1 or n==0):
    return 1
  else:
    return n*fact(n-1)
n=int(input())
print(fact(n))

#program to find the exp(x,y) using recursion function
def exp(x,y):
  return x**y
a=2
b=3
operation=exp
print(operation(a,b))

#program to find the exp(x,y) using recursion function
def exp(x,y):
  if(y==0):
    return 1;
  else:
    return x*exp(x,y-1)

x=int(input("enter a value:"))
y=int(input("enter a value:"))
print(exp(x,y))

def recur_fibo(n):
   if n <= 1:
       return n
   else:
       return(recur_fibo(n-1) + recur_fibo(n-2))

no=int(input("enter number"))
if no <= 0:
   print("Plese enter a positive integer")
else:
   print("Fibonacci sequence:")
   for i in range(no):
       print(recur_fibo(i))

def fib(n):
  if n<2:
    return 1
  return (fib(n-1)+fib(n-2))
n=int(input("enter the range:"))
for i in range(n):
  print(fib(i),end=" ")

def fib(n):
  if n<2:
    return 1
  return (fib(n-1)+fib(n-2))
n=int(input("enter the range:"))
for i in range(n):
  print("Fibonacci(",i,") = ",fib(i))

def hanoi(n,source,intermediate,destination):
    if n==1:
        print (source,intermediate)
        return
    hanoi(n-1,source,intermediate,destination)
    print ("move",n,source,destination)
    hanoi(n-1,intermediate,destination,source)    

n = 3
hanoi(n,'source','intermediate','destination')

#iteration

def hanoi(n,a,b,c):
  if n>0:
    hanoi(n-1,a,c,b)
    if a:
      c.append(a.pop())
    hanoi(n-1,b,a,c)
a=[1,2,3,4]
b=[]
c=[]
print(a,b,c)
hanoi(len(a),a,b,c)

#check if two strings match where one string contains wildcard characters

def solve(a,b):
  n,m=len(a),len(b)
  if n==0 and m==0:
    return True
  if n>1 and a[0]=='*' and m==0:
    return False
  if(n>1 and a[0]=='?') or (n !=0 and m !=0 and a[0]==b[0]):
    return solve(a[1:],b[1:])
  if n!=0 and a[0]=='*':
    return solve(a[1:],b) or solve(a,b[1:])
  return False
x=str(input("enter the string with char"))
y=str(input("enter the string for match"))
print("with wild characters:",x)
print("without wild characters ::",y)
print(solve(x,y))

def test(strs):
    return sum(map(ord,filter(str.isupper,strs)))
strs= "HeLIo"
print(strs)
print(test(strs))

list=[1,2,3,4,5,6]
start = 0
end = len(list)
step = 2
for i in range(start, end, step):
  x=i
  print(list[x:x+step])

def mul(n):
  total=1
  for x in n:
    total *=x
  return total
print(mul((1,2,3,4,5,6)))

#oopc
#program to access class variable using class object

class abc:
  var=22
obj=abc()
print(obj.var)

class abc:
  var=22
  var2=99
  def display(self):
    print("This is class method")
obj=abc()
print(obj.var)
print(obj.var2)
obj.display()

#program to illlustrate the constructor
#__init__()......method

class abc:
  def __init__(self, val):
    print("in class method")
    self.val=val
    print("the val is:",val)
obj=abc(10)

#program to differentiate between class and object variable

class abc:
  class_var=0 #class var
  def __init__(self,var):
    abc.class_var +=1
    self.var=var  #obj var
    print("the obj var is",var)
    print("the class val is",abc.class_var)
obj1=abc(10)
obj2=abc(20)
obj3=abc(30)

#program illustrating even or odd

class Number:
  even=0
  def check(self,num):
    if num%2==0:
      self.even=1
  def even_odd(self,num):
    self.check(num)
    if self.even==1:
      print(num, "is even ")
    else:
      print(num," is odd ")

#illustrating modifications on numerics
class Number:
  evens=[]
  odds=[]
  def __init__(self,num):
    self.num=num
    if num%2==0:
      Number.evens.append(num)
    else:
      Number.odds.append(num)
n1=Number(21)
n2=Number(22)
n3=Number(23)
n4=Number(24)
n5=Number(25)
print("even numbers",Number.evens)
print("odd numbers",Number.odds)

#delete method
#general syntax __del__

class abc():
  class_var = 0
  def __init__(self, var):
    abc.class_var +=1
    self.var=var
    print("The obj value is",var)
    print("the class value is",abc.class_var)
  def __del__(self):
    abc.class_var -=1
    print("object with value %d is going out of scope"%self.var)

obj1=abc(11)
obj2=abc(22)
obj3=abc(33)

del obj1
del obj2
del obj3

#program to demonstrate get and set items in a list

class numbers:
  def __init__(self, mylist):
    self.mylist=mylist
  def __getitem__(self, index):
    return self.mylist[index]
  def __setitem__(self, index, val):
    self.mylist[index]=val

numlist=numbers([1,2,3,4,5,6,7,8,9])
print(numlist[3])
print(numlist.mylist)
numlist[3]=10
print(numlist.mylist)

class ABC():
  def __init__(self, name, var):
    self.name=name
    self.var=var
  def __repr__(self):
    return repr(self.var)
  def __len__(self):
    return len(self.name)
  def __cmp__(self,obj):
    return self.var - obj.var

obj=ABC("abcdef",10)
print("The value stored in obj is",repr(obj))
print("The length of the name stored in obj",len(obj))
obj1=ABC("ghijkl",1)
val=obj.__cmp__(obj1)
if val==0:
  print("both values are equal")
elif val==-1:
  print("1st value is less than second")
else:
  print("2nd value is less than 1st")

#program to illustrate how to use private method

class abc():
  def __init__(self, var):
    self.__var=var
  def __display(self):
    print("this from class method,var = ",self.__var)
obj=abc(10)
obj._abc__display()

#To call a class method fom another method of same class

class abc():
  def __init__(self, var):
    self.var=var
  def display(self):
    print("var is=",self.var)
  def add_2(self):
    self.var +=2
    self.display()

obj=abc(10)
obj.add_2()

#program to show how a class method calls a function which is defined in the global name space

def scale_10(x):
  return x*10
class abc():
  def __init__(self, var):
    self.var=var
  def display(self):
    print("var is =",self.var)
  def modify(self):
    self.var=scale_10(self.var)

obj=abc(10)
obj.display()
obj.modify()
obj.display()

#program to demonstrate builtin function

class abc():
  def __init__(self,var):
    self.var=var
  def display(self):
    print("var is", self.var)
obj=abc(10)
obj.display()
print("check whether obj has attibute var ?")
getattr(obj,'var')
setattr(obj,'var',50)
print("after setting value,var is", obj.var)
setattr(obj, 'count',10)
delattr(obj,'var')
setattr(obj, 'var',40)
print("after deleting the atrribute",obj.var)

class abc():
  def __init__(self, var1, var2):
    self.var1=var1
    self.var2=var2
  def display(self):
    print("var1 is=",self.var1)
    print("var2 is=",self.var2)
obj=abc(10, 12.34)
obj.display()
print("object.__dict__ -",obj.__dict__)
print("object.__doc__ -",obj.__doc__)
print("object.__name__ -",abc.__name__)
print("object.__module__ -",obj.__module__)
print("object.__bases__ -",abc.__bases__)

class Solution:
   def solve(self, nums):
      evens = [num for num in nums if num % 2 == 0]
      odds = [num for num in nums if num % 2 != 0]
      evens.sort()
      odds.sort(reverse=True)
      even_i = 0
      odd_i = 0
      for index in range(len(nums)):
         if nums[index] % 2 == 0:
            nums[index] = evens[even_i]
            even_i += 1
         else:
            nums[index] = odds[odd_i]
            odd_i += 1
      return nums
ob = Solution()
print(ob.solve([9, 14, 12, 91, -4, 5]))

Short_list =[5,7,3,2,8,1,0,10,9,4,6]
def sort_list(my_list):
  even_list = []
  odd_list = []
  for i in my_list:
      if i % 2 == 0:
          even_list.append(i)
      else:
          odd_list.append(i)
  even_list.sort(),odd_list.sort()
  even_list.extend(odd_list)
  return even_list

print(sort_list(Short_list))

Short_list =[5,7,3,2,8,1,0,10,9,4,6]
def sort_list(my_list):
  even_list = []
  odd_list = []
  for i in my_list:
      if i % 2 == 0:
          even_list.append(i)
      else:
          odd_list.append(i)
  even_list.sort(),odd_list.sort()
  even_list.extend(odd_list)
  return even_list

print(sort_list(Short_list))

import gc
print("garbage collection threshold",gc.get_threshold())

#Abstarct class
#its the process of handling the information by hiding ingormal or unnecessary infomation to the user

class fruit:
  def taste(self):
    raise NotImplementedError()
  def rich(self):
    raise NotImplementedError()
  def color(self):
    raise NotImplementedError()

class mango(fruit):
  def taste(self):
    return "sweet"
  def rich(self):
    return "vitamin A"
  def color(self):
    return "yellow"

class orange(fruit):
  def taste(self):
    return "sour"
  def rich(self):
    return "vitamin C"
  def color(self):
    return "orange"

Alphanso=mango()
print(Alphanso.taste(), Alphanso.rich(),Alphanso.color())

class polygon:
  def get_data(self):
    raise NotImplementedError()
  def area(self):
    raise NotImplementedError()

class rectangle(polygon):
  def get_data(self):
    self.length=float(input(" enter rectangle length"))
    self.breadth=float(input("enter rectangle breadth"))
  def area(self):
    return self.length * self.breadth

class triangle(polygon):
  def get_data(self):
    self.base=float(input("enter rectangle breadth"))
    self.height=float(input(" enter rectangle length"))
  def area(self):
    return 0.5 * self.base * self.height
  
R=rectangle()
R.get_data()
print("area of a rectangle",R.area())
T=triangle()
T.get_data()
print("area of triangle",T.area())

#program to interviene polymorphism on complex number

class Complex():
  def __init__(self):
    self.real = 0
    self.img = 0
  def setValue(self, real, img):
    self.real=real
    self.img=img
  def __add__(self,c):
    temp=Complex()
    temp.real=self.real+c.real
    temp.img=self.img+c.img
    return temp
  def display(self):
    print("(",self.real,"+",self.img,"i)")

c1=Complex()
c1.setValue(2,3)
c2=Complex()
c2.setValue(3,4)
c3=c1+c2
print("result is")
c3.display()

#encapsulation
#encapsuling public members
class pub:
  def __init__(self, name, num):
    self.name=name
    self.num=num
  def Num(self):
    print("roll num is",self.num)

obj=pub("sathwika",2019)
obj.Num()

#program to overload the __call__method
class multi:
  def __init__(self,num):
    self.num=num
  def __call__(self,O):
    return self.num*O

x=multi(10)
print(x(5))

#program to over-ride get-item and set-item methods

class mylist:
  def __init__(self, list):
    self.list=list
  def __getitem__(self, index):
    return self.list[index]
  def __setitem__(self, index, val):
    self.list[index]=val
  def __len__(self):
    return len(self.list)
  def display(self):
    print(self.list)

L=mylist([1,2,3,4,5,6,7,8,9])
print("list is.....")
L.display()
index=int(input("enter the index of the list"))
print(L[index])
index=int(input("enter the index of the list"))
num=int(input("enter the position u want to modify"))
L[index]=num
L.display()
print("length of list is:",len(L))

class number:
  def __init__(self,num):
    self.num=num
  def display(self):
    return self.num
  def __abs__(self):
    return abs(self.num)
  def __float__(self):
    return float(self.num)
  def __hex__(self):
    return hex(self.num)
  def __oct__(self):
    return oct(self.num)
  def __setitem__(self,num):
    self.num=num

n = number(-15)
print("Number is",n.display())
print("Abs(n) is",abs(n))
n = abs(n)
print("Converting to float",float(n))
print("Converting to hex",hex(n))
print("Converting to oct",oct(n))

#to visualize inheritance flow

class person:
  def __init__(self,name,age):
    self.name=name
    self.age=age
  def display(self):
    print("name is ",self.name)
    print("age is ",self.age)
class teacher(person):
    def __init__(self,name,age,exp,area):
      person.__init__(self,name,age)
      self.exp=exp
      self.area=area
    def displaydata(self):
      person.display(self)
      print("experience is",self.exp)
      print("research area is",self.area)
class student(person):
  def __init__(self,name,age,course,marks):
    person.__init__(self,name,age)
    self.course=course
    self.marks=marks
  def displaydata(self):
    person.display(self)
    print("course=",self.course)
    print("marks=",self.marks)

print("-----teacherclass--------")
T=teacher("Mark",43,20,"JSS")
T.displaydata()
print("-----studentclass--------")
S=student("Lucky",20,"B.tech",78)
S.displaydata()

#to visualize inheritance flow

class person:
  def __init__(self,name,age):
    self.name=name
    self.age=age
  def display(self):
    print("name is ",self.name)
    print("age is ",self.age)
class teacher(person):
    def __init__(self,name,age,exp,area):
      person.__init__(self,name,age)
      self.exp=exp
      self.area=area
    def displaydata(self):
      person.display(self)
      print("experience is",self.exp)
      print("research area is",self.area)
class student(person):
  def __init__(self,name,age,course,marks):
    person.__init__(self,name,age)
    self.course=course
    self.marks=marks
  def displaydata(self):
    person.display(self)
    print("course=",self.course)
    print("marks=",self.marks)

print("-----teacherclass--------")
T=teacher("Mark",43,20,"JSS")
T.displaydata()
print("-----studentclass--------")
S=student("Lucky",20,"B.tech",78)
S.displaydata()

print("T is teacher:", isinstance(T, teacher))
print("T is integer:", isinstance(T, int))
print("T is a person:", isinstance(T, person))
print("T is a object:", isinstance(T, object))
print("person is subclass of teacher",issubclass(person,teacher))
print("Teacher is subclass of person",issubclass(teacher,person))
print("boolean is a subclass of int:",issubclass(bool,int))

#progarm to invoke __init__ in multiple inheritance

class base1(object):
  def __init__(self):
    print("base class 1")
class base2(object):
  def __init__(self):
    print("base class 1")
class Derived(base1,base2):
  pass
D=Derived()

#progarm to call constructor of base class from super

class base1(object):
  def __init__(self):
    print("base class 1")
    super(base1, self).__init__()
class base2(object):
  def __init__(self):
    print("base class 2")
class Derived(base1,base2):
  pass
D=Derived()

class base1(object):
  def __init__(self):
    print("base class 1")
    super(base1, self).__init__()
class base2(object):
  def __init__(self):
    print("base class 2")
class Derived(base1,base2):
  def __init__(self):
    super(Derived, self).__init__()
    print("Derived class")
    
D=Derived()

class person:
  def name(self):
    print("name is...")
class teacher(person):
  def qual(self):
    print("qualification is phd")
class hod(teacher):
  def expe(self):
    print("experience is 22 years")

HOD=hod()
HOD.name()
HOD.qual()
HOD.expe()

class student:
  def name(self):
    print("name.....")
class academic(student):
  def acad_score(self):
    print("academic score 90% above")
class EEE(student):
  def EEE_score(self):
    print("EEE score -----60% and above ")
class  result(academic,EEE):
  def eligibility(self):
    print("_____eligibility to apply_____")
    self.acad_score()
    self.EEE_score()
R=result()
R.eligibility()

size=int(input())
count=0
flag=0
max=0
str=input()
arr=list(str)
for i in range(0,size):
  if arr[i] == '1':
    count=count+1
    flag=1
  elif(arr[i]=='0' and flag==1):
    count=0
    flag=0
  if count>max:
    max=count
print(max)

v=int(input())
W=int(input())
for i in range(x):
  x=(4v-w)//2
print(x)

#non repeated character in string
string="LEVEL"
for i in string:
    count=0
    for j in string:
      if i==j:
        count+=1
      if count>1:
        break
    if count==1:
      print("non repeated character",i)

class Node:
   def _init_(self, dataval=None):
      self.dataval = dataval
      self.nextval = None

class SLinkedList:
   def _init_(self):
      self.headval = None
# Print the linked list
   def listprint(self):
      printval = self.headval
      while printval is not None:
         print (printval.dataval)
         printval = printval.nextval
   def AtBegining(self,newdata):
      NewNode = Node(newdata)

# Update the new nodes next val to existing node
   NewNode.nextval = self.headval
   self.headval = NewNode

list = SLinkedList()
list.headval = Node("Mon")
e2 = Node("Tue")
e3 = Node("Wed")

a=int(input())
b=int(input())
c=int(input())
if (a>b &a>c):
  print("a is greater")
elif(b>a & b>c):
  print("b is greater")
else:
  print("c is greater")

rows=int(input("enter number of rows"))
for i in range(rows):
  for j in range(i+1):
    print(j+1,end=" ")
  print("\n")

rows=int(input("enter number of rows"))
for i in range(rows):
  for m in range(i+1):
    print("*",end=" ")
  print("\n")

n=int(input())
fact=1
for i in range(1,n+1):
  fact=fact*i
print(fact)

n=int(input())
flag=False
if n==1:
  print(n,"ia not a prime")
elif n>=1:
  for i in range(2,n):
    if(n%i==0):
      flag=True
      break
if flag:
  print(n,"is not a prime")
else:
  print(n,"is a prime")

n=int(input())
n1=0
n2=1
#count=0
if n<=0:
  print("positive")
elif n==1:
  print("fibonnaci",n)
  print(n1)
else:
  print("Fibonaci sequence")
  while count<n:
    print(n1)
  n=n1+n2
  n1=n2
  n2=n
  count+=1

sum=0
num=int(input("enter numbers"))
while (num!=0):
  temp=num%10
  sum=sum+temp
  num=num//10
print("sum:",sum)

my_list=[10,20,30,40]
avg=sum(my_list)/len(my_list)
print("average of all the elements:",round(avg,3))

def Remove(tuples):
  tuples=[t for t in tuples if t]
  return tuples
tuples=[(),('aaa',2,4),(),('bbb',5,6)]
print(Remove(tuples))

#create a tuple of string type
#list of int type
list1=['Red','green','white','black','pink','yellow']
print(list1)
list1.remove('Red')
list1.remove('pink')
list1.remove('yellow')
print(list1)

txt="Hello"[::-1]
print(txt)

my_list=[10,20,30,40,50]
avg=sum(my_list)/len(my_list)
print("average of all the elements:",round(avg,3))

n=int(input())
for i in range(0,n):
  name=input()
  password=input()
  print(name)
  print(password)

n=int(input())
arr=[]
for i in range(n):
  username=input("username:")
  password=input("password")
  arr.append({username:password})

print(arr)

n=int(input())
arr=[]
for i in range(n):
  username=input("username:")
  password=input("password")
  arr.append({username:password})
print(arr)
u=input("username:")
p=input("password")
found=False
for obj in arr:
  try:
    password=obj[u]
    found=True
    if p==password:
      print("valid password")
    else:
      print("invalid password")
  except:
    pass
if found==False:
  print("user not found")

stack=[]
stack.append(1)
stack.append(2)
stack.append(3)
stack.append(4)
stack.append(5)
print(stack)
stack.pop()
print(stack)

